import * as zg-singularize(((zg-entity...zg-name)))Actions from './zg-singularize(((zg-entity...zg-name)))Actions';
import * as types from './actionTypes';
import { [[[zg-entity...zg-name]]] } from '../../../tools/mockData';
import thunk from "redux-thunk";
import fetchMock from "fetch-mock";
import configureMockStore from "redux-mock-store";

//Test an aysnc action
const middleware = [thunk];
const mockStore = configureMockStore(middleware);

describe("Async Actions", () => {
    afterEach(() => {
        fetchMock.restore();
    });

    describe("Load zg-upperFirstCase(((zg-entity...zg-name))) Thunk", () => {
        it("should create BEGIN_API_CALL and LOAD_zg-upper(((zg-entity...zg-name)))_SUCCESS when loading [[[zg-entity...zg-name]]]", () => {
            fetchMock.mock("*", {
                body: [[[zg-entity...zg-name]]],
                headers: { "content-type": "application/json" }
            });

            const expectedActions = [
                { type: types.BEGIN_API_CALL },
                { type: types.LOAD_zg-u(((zg-entity...zg-name)))_SUCCESS, [[[zg-entity...zg-name]]] }
            ];

            const store = mockStore({ [[[zg-entity...zg-name]]]: [] });
            return store.dispatch(zg-singularize(((zg-entity...zg-name)))Actions.loadzg-upperFirstCase(((zg-entity...zg-name)))());
        });
    });
});

describe("createzg-upperFirstCase(((zg-singularize(((zg-entity...zg-name))))))Success", () => {

    it('should create a CREATE_zg-upper(((zg-singularize(((zg-entity...zg-name))))))_SUCCESS action', () => {
        //arrange
        const zg-singularize(((zg-entity...zg-name))) = [[[zg-entity...zg-name]]][0];
        const expectedAction = {
            type: types.CREATE_zg-upper(((zg-singularize(((zg-entity...zg-name))))))_SUCCESS,
            zg-singularize(((zg-entity...zg-name)))
        };

        //act 
        const action = zg-singularize(((zg-entity...zg-name)))Actions.createzg-upperFirstCase(((zg-singularize(((zg-entity...zg-name))))))Success(zg-singularize(((zg-entity...zg-name))));

        //assert
        expect(action).toEqual(expectedAction);
    });
});